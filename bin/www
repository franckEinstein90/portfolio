#!/usr/bin/env node

"use strict"; 

require('module-alias/register')

const app = {
  
}

require('../app').initApp( app ); 
require('@server/users.js').addPlayerRegistry( app ); 

const debug = require('debug')('threekit-job-application:server');
const http = require('http');
const port = normalizePort(process.env.PORT || '3000');
app.express.set('port', port);



const server = http.createServer(app.express)
const io = require('socket.io')(server)


io.on('connection', function(socket){

  const clientSocketId = socket.client.conn.id

  socket.on('replace', function(userInfo){

  })

  socket.on('disconnect', function(){
      const outgoingPlayer = app.players.removeByClientConnectionId(clientSocketId); 
      console.log(`Player ${outgoingPlayer.id} left the game`)
      return 
    })

  if(app.players.hasFreeSpot()){ //there is a free spot for this user

    const player = app.players.createNewPlayer( clientSocketId )
    player.status = 'on'
    console.log(`Player #${player.id} is online`)

    //broadcast to everyone except new player
    socket.broadcast.emit('new player', {
          newPlayer: player, 
          updatedList: app.players.list()
        }) 

    //broadcast to new player only
    io.to(clientSocketId).emit('welcome', {
          playerInfo:player,
          players: app.players.list()
        }); 

  } else{ 
    socket.emit('player limit', {players: app.players}) 
  } 
})


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
